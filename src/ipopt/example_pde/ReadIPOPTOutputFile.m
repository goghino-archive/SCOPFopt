function IpOptStat = ReadIPOPTOutputFile(Filename)
    IpOptStat = struct( 'IPOPT_Version',{[]},...
                        'LinearSolver',{[]},...
                        'NumNonZeroEqConstrJac',{[]},...
                        'NumNonZeroIneqConstrJac',{[]},...
                        'NumNonZerosLagrHess',{[]},...
                        'NumVars',{[]},...
                        'NumLowBdVars',{[]},...
                        'NumUpBDVars',{[]},...
                        'NumLowUpBdVars',{[]},...
                        'NumEqConstr',{[]},...
                        'NumIneqConstr',{[]},...
                        'NumIneqConstrLowBd',{[]},...
                        'NumIneqConstrUpBd',{[]},...
                        'NumIneqConstrLowUpBd',{[]},...
                        'NumIterations',{[]},...
                        'NumObjFctEval',{[]},...
                        'NumObjGradEval',{[]},...
                        'NumEqConstrEval',{[]},...
                        'NumIneqConstrEval',{[]},...
                        'NumEqConstrJacEval',{[]},...
                        'NumIneqConstrJacEval',{[]},...
                        'NumLagrHessEval',{[]},...
                        'RuntimeIPOPTNoFctEval',{[]},...
                        'RuntimeFctEval',{[]},...
                        'RuntimeAll',{[]},...
                        'RuntimePrintProblemStatistics',{[]},...
                        'RuntimeInitializeIterates',{[]},...
                        'RuntimeUpdateHessian',{[]},...
                        'RuntimeOutputIteration',{[]},...
                        'RuntimeUpdateBarrierParameter',{[]},...
                        'RuntimeComputeSearchDirection',{[]},...
                        'RuntimeComputeAcceptableTrialPoint',{[]},...
                        'RuntimeAcceptTrialPoint',{[]},...
                        'RuntimeCheckConvergence',{[]},...
                        'RuntimePDSystemSolverTotal',{[]},...
                        'RuntimePDSystemSolverSolveOnce',{[]},...
                        'RuntimeComputeResiduals',{[]},...
                        'RuntimeStdAugSystemSolverMultiSolve',{[]},...
                        'RuntimeLinearSystemScaling',{[]},...
                        'RuntimeLinearSystemSymbolicFactorization',{[]},...
                        'RuntimeLinearSystemFactorization',{[]},...
                        'RuntimeLinearSystemBackSolve',{[]},...
                        'RuntimeLinearSystemStructureConverter',{[]},...
                        'RuntimeLinearSystemStructureConverterInit',{[]},...
                        'RuntimeQualityFunctionSearch',{[]},...
                        'RuntimeTryCorrector',{[]},...
                        'RuntimeTask1',{[]},...
                        'RuntimeTask2',{[]},...
                        'RuntimeTask3',{[]},...
                        'RuntimeTask4',{[]},...
                        'RuntimeTask5',{[]},...
                        'RuntimeObjFctEval',{[]},...
                        'RuntimeEqConstrEval',{[]},...
                        'RuntimeIneqConstrEval',{[]},...
                        'RuntimeEqConstrJacEval',{[]},...
                        'RuntimeIneqConstrJacEval',{[]},...
                        'RuntimeLagrHessEval',{[]});
                        
    [fid, message] = fopen(Filename);
    if fid<0
        error(message);
    end
    
    line = fgetl(fid);
    [IpOptStat.IPOPT_Version NextIdx] = ReadItem(line,'Ipopt version ', ', ');
    IpOptStat.LinearSolver = ReadItem(line,'linear solver ', '.',NextIdx);

    IpOptStat.NumNonZeroEqConstrJac = ReadValue(fid,'Number of nonzeros in equality constraint Jacobian');
    IpOptStat.NumNonZeroIneqConstrJac = ReadValue(fid,'Number of nonzeros in inequality constraint Jacobian'); 
    IpOptStat.NumNonZerosLagrHess = ReadValue(fid,'Number of nonzeros in Lagrangian Hessian'); 
    IpOptStat.NumVars = ReadValue(fid,'Total number of variables'); 
    IpOptStat.NumLowBdVars = ReadValue(fid,'variables with only lower bounds'); 
    IpOptStat.NumUpBDVars = ReadValue(fid,'variables with lower and upper bounds'); 
    IpOptStat.NumLowUpBdVars = ReadValue(fid,'variables with only upper bounds'); 
    IpOptStat.NumEqConstr = ReadValue(fid,'Total number of equality constraints'); 
    IpOptStat.NumIneqConstr = ReadValue(fid,'Total number of inequality constraints'); 
    IpOptStat.NumIneqConstrLowBd = ReadValue(fid,'inequality constraints with only lower bounds'); 
    IpOptStat.NumIneqConstrUpBd = ReadValue(fid,'inequality constraints with lower and upper bounds'); 
    IpOptStat.NumIneqConstrLowUpBd = ReadValue(fid,'inequality constraints with only upper bounds'); 
    IpOptStat.NumIterations = ReadValue(fid,'Number of Iterations'); 
    IpOptStat.NumObjFctEval = ReadValue(fid,'Number of objective function evaluations'); 
    IpOptStat.NumObjGradEval = ReadValue(fid,'Number of objective gradient evaluations'); 
    IpOptStat.NumEqConstrEval = ReadValue(fid,'Number of equality constraint evaluations'); 
    IpOptStat.NumIneqConstrEval = ReadValue(fid,'Number of inequality constraint evaluations'); 
    IpOptStat.NumEqConstrJacEval = ReadValue(fid,'Number of equality constraint Jacobian evaluations'); 
    IpOptStat.NumIneqConstrJacEval = ReadValue(fid,'Number of inequality constraint Jacobian evaluations'); 
    IpOptStat.NumLagrHessEval = ReadValue(fid,'Number of Lagrangian Hessian evaluations'); 

    IpOptStat.RuntimeIPOPTNoFctEval = ReadValue(fid,'Total CPU secs in IPOPT (w/o function evaluations)'); 
    IpOptStat.RuntimeFctEval = ReadValue(fid,'Total CPU secs in NLP function evaluations'); 
    IpOptStat.RuntimeAll = ReadValue(fid,'OverallAlgorithm');
    IpOptStat.RuntimePrintProblemStatistics = ReadValue(fid,'PrintProblemStatistics'); 
    IpOptStat.RuntimeInitializeIterates = ReadValue(fid,'InitializeIterates'); 
    IpOptStat.RuntimeUpdateHessian = ReadValue(fid,'UpdateHessian'); 
    IpOptStat.RuntimeOutputIteration = ReadValue(fid,'OutputIteration'); 
    IpOptStat.RuntimeUpdateBarrierParameter = ReadValue(fid,'UpdateBarrierParameter'); 
    IpOptStat.RuntimeComputeSearchDirection = ReadValue(fid,'ComputeSearchDirection'); 
    IpOptStat.RuntimeComputeAcceptableTrialPoint = ReadValue(fid,'ComputeAcceptableTrialPoint'); 
    IpOptStat.RuntimeAcceptTrialPoint = ReadValue(fid,'AcceptTrialPoint'); 
    IpOptStat.RuntimeCheckConvergence = ReadValue(fid,'CheckConvergence'); 
    IpOptStat.RuntimePDSystemSolverTotal = ReadValue(fid,'PDSystemSolverTotal'); 
    IpOptStat.RuntimePDSystemSolverSolveOnce = ReadValue(fid,'PDSystemSolverSolveOnce'); 
    IpOptStat.RuntimeComputeResiduals = ReadValue(fid,'ComputeResiduals'); 
    IpOptStat.RuntimeStdAugSystemSolverMultiSolve = ReadValue(fid,'StdAugSystemSolverMultiSolve'); 
    IpOptStat.RuntimeLinearSystemScaling = ReadValue(fid,'LinearSystemScaling'); 
    IpOptStat.RuntimeLinearSystemSymbolicFactorization = ReadValue(fid,'LinearSystemSymbolicFactorization'); 
    IpOptStat.RuntimeLinearSystemFactorization = ReadValue(fid,'LinearSystemFactorization'); 
    IpOptStat.RuntimeLinearSystemBackSolve = ReadValue(fid,'LinearSystemBackSolve'); 
    IpOptStat.RuntimeLinearSystemStructureConverter = ReadValue(fid,'LinearSystemStructureConverter'); 
    IpOptStat.RuntimeLinearSystemStructureConverterInit = ReadValue(fid,'LinearSystemStructureConverterInit'); 
    IpOptStat.RuntimeQualityFunctionSearch = ReadValue(fid,'QualityFunctionSearch'); 
    IpOptStat.RuntimeTryCorrector = ReadValue(fid,'TryCorrector'); 
    IpOptStat.RuntimeTask1 = ReadValue(fid,'Task1'); 
    IpOptStat.RuntimeTask2 = ReadValue(fid,'Task2'); 
    IpOptStat.RuntimeTask3 = ReadValue(fid,'Task3'); 
    IpOptStat.RuntimeTask4 = ReadValue(fid,'Task4'); 
    IpOptStat.RuntimeTask5 = ReadValue(fid,'Task5'); 
    IpOptStat.RuntimeObjFctEval = ReadValue(fid,'Objective function'); 
    IpOptStat.RuntimeEqConstrEval = ReadValue(fid,'Equality constraints'); 
    IpOptStat.RuntimeIneqConstrEval = ReadValue(fid,'Inequality constraints'); 
    IpOptStat.RuntimeEqConstrJacEval = ReadValue(fid,'Equality constraint Jacobian'); 
    IpOptStat.RuntimeIneqConstrJacEval = ReadValue(fid,'Inequality constraint Jacobian'); 
    IpOptStat.RuntimeLagrHessEval = ReadValue(fid,'Lagrangian Hessian');

    fclose(fid);
end

function [Item NextIdx] = ReadItem(strLine,StartPattern,EndPattern,StartSearchIdx)
    if ~exist('StartSearchIdx','var')
        StartSearchIdx = 1;
    end
    Item = [];
    IdxS = strfind(strLine(StartSearchIdx:end),StartPattern);
    if isempty(IdxS)
        NextIdx = StartSearchIdx;
        return
    end
    IdxS = IdxS + StartSearchIdx + length(StartPattern) -1;
    if isempty(EndPattern)
        IdxE = length(strLine);
    else
        IdxE = strfind(strLine(IdxS:end),EndPattern);
        if isempty(IdxS)
            NextIdx = IdxS;
            return
        end
        IdxE = IdxE + IdxS -2;
    end
    Item = strLine(IdxS:IdxE);
    if IdxE==length(strLine)
        NextIdx = [];
    else
        NextIdx = IdxE+1;
    end
end

function Val = ReadValue(fid,Pattern)
    line = fgetl(fid);
    IdxPat = strfind(line,Pattern);
    while isempty(IdxPat)
        line = fgetl(fid);
        if line==-1
            Val = [];
            return;
        end
        IdxPat = strfind(line,Pattern);
    end
    IdxS = strfind(line(IdxPat:end),':');
    if isempty(IdxS)
        IdxS = strfind(line(IdxPat:end),'=');
        if isempty(IdxS)
            Val = [];
            return
        end
    end
    IdxS = IdxS + IdxPat;
    Val = str2num(line(IdxS:end));
end